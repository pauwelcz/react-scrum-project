[{"C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\App.tsx":"1","C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\pages\\Project.tsx":"2","C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\pages\\Task.tsx":"3","C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\pages\\Login.tsx":"4","C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\pages\\NotFound.tsx":"5","C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\pages\\MyProjects.tsx":"6","C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\components\\ProjectItem.tsx":"7","C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\pages\\ProjectScrum.tsx":"8","C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\pages\\Category.tsx":"9","C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\utils\\constants.ts":"10","C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\pages\\Home.tsx":"11","C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\utils\\firebase.ts":"12","C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\components\\BoardCard.tsx":"13","C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\components\\BoardColumn.tsx":"14","C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\index.tsx":"15","C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\serviceWorkerRegistration.ts":"16"},{"size":3387,"mtime":1607879252014,"results":"17","hashOfConfig":"18"},{"size":3023,"mtime":1607967114760,"results":"19","hashOfConfig":"18"},{"size":7840,"mtime":1607950790413,"results":"20","hashOfConfig":"18"},{"size":3072,"mtime":1608297177060,"results":"21","hashOfConfig":"18"},{"size":130,"mtime":1606483013762,"results":"22","hashOfConfig":"18"},{"size":2298,"mtime":1608061151510,"results":"23","hashOfConfig":"18"},{"size":4708,"mtime":1607971709276,"results":"24","hashOfConfig":"18"},{"size":13620,"mtime":1608228922621,"results":"25","hashOfConfig":"18"},{"size":4070,"mtime":1608060826376,"results":"26","hashOfConfig":"18"},{"size":303,"mtime":1608060826381,"results":"27","hashOfConfig":"18"},{"size":1064,"mtime":1608297317093,"results":"28","hashOfConfig":"18"},{"size":3143,"mtime":1607965550748,"results":"29","hashOfConfig":"18"},{"size":3588,"mtime":1608228922613,"results":"30","hashOfConfig":"18"},{"size":1031,"mtime":1607355289510,"results":"31","hashOfConfig":"18"},{"size":231,"mtime":1606482515759,"results":"32","hashOfConfig":"18"},{"size":5654,"mtime":1608229028023,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"10c0u2v",{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\App.tsx",[],"C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\pages\\Project.tsx",[],"C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\pages\\Task.tsx",["69","70","71"],"import React from 'react';\r\nimport ReactMarkdown from 'react-markdown';\r\n\r\nimport { FC, useEffect, useState } from 'react';\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\nimport { categoriesCollection, Category, TaskReference, tasksCollection, useLoggedInUser } from '../utils/firebase';\r\n\r\nimport { Card, CardContent, CardActions } from '@material-ui/core';\r\nimport { Typography, TextField } from '@material-ui/core';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from '@material-ui/core/Button';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport { FormControl, makeStyles, Radio, RadioGroup } from '@material-ui/core';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel/FormControlLabel';\r\nimport Chip from '@material-ui/core/Chip/Chip';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 120,\r\n    fullWidth: 'true',\r\n    display: 'flex',\r\n  },\r\n  selectEmpty: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n  button: {\r\n    variant: 'text',\r\n    size: 'large',\r\n    color: theme.palette.primary.main,\r\n  },\r\n  preview: {\r\n    textAlign: 'left',\r\n    fontSize: \"65%\",\r\n  },\r\n  categories: {\r\n    marginLeft: '10px',\r\n  },\r\n  chip: {\r\n    margin: theme.spacing(0.5)\r\n  }\r\n}));\r\n\r\n/**\r\n * Stranka pro vytvareni tasku\r\n */\r\nconst TaskForm: FC = () => {\r\n  const location = useLocation<{ taskId: string, project: string, category: string[], name: string, note: string, phase: string }>();\r\n\r\n  const [name, setName] = useState(location.state.name === undefined ? '' : location.state.name);\r\n  const [note, setNote] = useState(location.state.note === undefined ? '' : location.state.note);\r\n  const [phase, setPhase] = useState(location.state.phase === undefined ? 'TO DO' : location.state.phase);\r\n  const [error, setError] = useState<string>();\r\n  /**\r\n   * Vkladani kategorii do pole\r\n   */\r\n  const [category, setCategory] = useState<string[]>(location.state.category === undefined ? [] : location.state.category);\r\n  const handleTaskCategories = (category_item: string) => {\r\n    // nasla se kategorie\r\n    if (category.find(item => item === category_item) !== undefined) {\r\n      try {\r\n        setCategory(category.filter(item => item !== category_item))\r\n      } catch (err) {\r\n        setError(err.what);\r\n      }\r\n    } else {\r\n      try {\r\n        setCategory(category => [...category, category_item])\r\n      } catch (err) {\r\n        setError(err.what);\r\n      }\r\n    }\r\n  }\r\n\r\n  const changeChipColor = (category_item: Category) => {\r\n    if (category.find(item => item === category_item.id) !== undefined) {\r\n      return category_item.color;\r\n    }\r\n\r\n    return \"gray\";\r\n  }\r\n\r\n  const classes = useStyles();\r\n\r\n  const { push } = useHistory();\r\n  const history = useHistory();\r\n\r\n  const user = useLoggedInUser();\r\n\r\n  const taskId = location.state.taskId;\r\n  const projectId = location.state.project;\r\n\r\n  const handleChangePhase = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n    setPhase(event.target.value as string);\r\n  };\r\n\r\n  /**\r\n   * Ulozeni tasku\r\n   */\r\n  const handleTaskSubmit = async () => {\r\n    try {\r\n      const taskDoc: TaskReference = taskId ? tasksCollection.doc(taskId) : tasksCollection.doc();\r\n\r\n      await taskDoc.set({\r\n        id: taskDoc.id,\r\n        name,\r\n        category,\r\n        phase,\r\n        project: projectId,\r\n        by: {\r\n          uid: user?.uid ?? '',\r\n          email: user?.email ?? '',\r\n        },\r\n        note,\r\n      });\r\n\r\n      push('/project-scrum', projectId);\r\n    } catch (err) {\r\n\r\n      setError(err.what);\r\n    }\r\n  };\r\n\r\n  const handleTaskDelete = async () => {\r\n    try {\r\n      await tasksCollection.doc(taskId).delete();\r\n      push('/project-scrum', projectId);\r\n    } catch (err) {\r\n      console.log(`[Task submit] Error occurred ${err.message}`);\r\n      setError(err.what);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Zobrazeni kategorii\r\n   */\r\n  const [categories, setCategories] = useState<Category[]>([]);\r\n  useEffect(() => {\r\n    categoriesCollection.onSnapshot(\r\n      snapshot => {\r\n        const categoriesFromFS: Category[] = snapshot.docs.map(doc => {\r\n          const cat: Category = doc.data();\r\n          const id: string = doc.id;\r\n          return { ...cat, id: id }\r\n        });\r\n        setCategories(categoriesFromFS);\r\n      },\r\n      err => setError(err.message),\r\n    );\r\n  }, []);\r\n\r\n\r\n  return (\r\n    <Card>\r\n      <CardContent>\r\n        <Grid item lg={6} direction=\"row\">\r\n          <Typography variant='h4' gutterBottom>\r\n            {taskId ? 'Update task' : 'Create task'}\r\n          </Typography>\r\n        </Grid>\r\n        <Grid container spacing={6} direction=\"row\">\r\n          <Grid item lg={6} direction=\"column\" alignContent=\"flex-start\">\r\n            <TextField\r\n              label='Task name'\r\n              name='name'\r\n              fullWidth\r\n              margin='normal'\r\n              variant='outlined'\r\n              value={name}\r\n              onChange={e => setName(e.target.value)}\r\n            />\r\n\r\n            <FormControl className={classes.formControl}>\r\n              <InputLabel id=\"demo-simple-select-label\">Phase</InputLabel>\r\n              <Select\r\n                labelId=\"demo-simple-select-label\"\r\n                id=\"demo-simple-select\"\r\n                value={phase}\r\n                onChange={handleChangePhase}\r\n              >\r\n                <MenuItem value={'TO DO'}>TO DO</MenuItem>\r\n                <MenuItem value={'IN PROGRESS'}>IN PROGRESS</MenuItem>\r\n                <MenuItem value={'TESTING'}>TESTING</MenuItem>\r\n                <MenuItem value={'DONE'}>DONE</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n            \r\n            <FormControl margin=\"normal\" fullWidth className={classes.categories}>\r\n\r\n            <Typography variant='caption' color='textSecondary' align=\"left\">\r\n                Categories\r\n            </Typography>\r\n            <div>\r\n            {categories.filter(category => category.project === projectId).map((cat, i) => (\r\n              <Chip\r\n                size=\"small\"\r\n                label={cat.name}\r\n                clickable\r\n                onClick={() => {handleTaskCategories(cat.id)}}\r\n                className={classes.chip}\r\n                style={{backgroundColor: `${changeChipColor(cat)}`}} \r\n              />\r\n            ))}\r\n            </div>\r\n            </FormControl>\r\n\r\n            <TextField\r\n              label='Note'\r\n              name='note'\r\n              fullWidth\r\n              multiline\r\n              margin='normal'\r\n              variant='outlined'\r\n              value={note}\r\n              onChange={e => setNote(e.target.value)}\r\n            />\r\n          </Grid>\r\n\r\n          <Grid container item lg={6} direction=\"column\" alignItems=\"flex-start\">\r\n            <Typography variant='caption' color='textSecondary'>\r\n              Note preview\r\n              </Typography>\r\n\r\n            <ReactMarkdown children={note} className={classes.preview} />\r\n\r\n            {error && (\r\n              <Typography variant='subtitle2' align='left' color='error' paragraph>\r\n                <b>{error}</b>\r\n              </Typography>\r\n            )}\r\n          </Grid>\r\n        </Grid>\r\n      </CardContent>\r\n\r\n      <CardActions>\r\n        <Button className={classes.button} onClick={handleTaskSubmit}>\r\n          {taskId ? 'Update task' : 'Create task'}\r\n        </Button>\r\n\r\n        {(taskId) && <Button className={classes.button} onClick={handleTaskDelete}>\r\n          Delete task\r\n          </Button>}\r\n\r\n        <Button className={classes.button} onClick={() => history.goBack()}>\r\n          Back\r\n          </Button>\r\n      </CardActions>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default TaskForm;\r\n",["72","73"],"C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\pages\\Login.tsx",[],"C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\pages\\NotFound.tsx",[],["74","75"],"C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\pages\\MyProjects.tsx",["76"],"C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\components\\ProjectItem.tsx",["77","78","79","80","81"],"C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\pages\\ProjectScrum.tsx",["82","83","84"],"C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\pages\\Category.tsx",[],"C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\utils\\constants.ts",[],"C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\pages\\Home.tsx",["85"],"C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\utils\\firebase.ts",[],"C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\components\\BoardCard.tsx",["86","87"],"C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\components\\BoardColumn.tsx",[],"C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\index.tsx",[],"C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\serviceWorkerRegistration.ts",[],{"ruleId":"88","severity":1,"message":"89","line":15,"column":35,"nodeType":"90","messageId":"91","endLine":15,"endColumn":40},{"ruleId":"88","severity":1,"message":"92","line":15,"column":42,"nodeType":"90","messageId":"91","endLine":15,"endColumn":52},{"ruleId":"88","severity":1,"message":"93","line":16,"column":8,"nodeType":"90","messageId":"91","endLine":16,"endColumn":24},{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","replacedBy":"97"},{"ruleId":"94","replacedBy":"98"},{"ruleId":"96","replacedBy":"99"},{"ruleId":"88","severity":1,"message":"100","line":17,"column":12,"nodeType":"90","messageId":"91","endLine":17,"endColumn":17},{"ruleId":"88","severity":1,"message":"101","line":14,"column":42,"nodeType":"90","messageId":"91","endLine":14,"endColumn":49},{"ruleId":"88","severity":1,"message":"102","line":21,"column":7,"nodeType":"90","messageId":"91","endLine":21,"endColumn":16},{"ruleId":"88","severity":1,"message":"100","line":40,"column":12,"nodeType":"90","messageId":"91","endLine":40,"endColumn":17},{"ruleId":"103","severity":1,"message":"104","line":84,"column":72,"nodeType":"105","messageId":"106","endLine":84,"endColumn":74},{"ruleId":"103","severity":1,"message":"104","line":88,"column":76,"nodeType":"105","messageId":"106","endLine":88,"endColumn":78},{"ruleId":"88","severity":1,"message":"107","line":13,"column":95,"nodeType":"90","messageId":"91","endLine":13,"endColumn":108},{"ruleId":"88","severity":1,"message":"100","line":49,"column":10,"nodeType":"90","messageId":"91","endLine":49,"endColumn":15},{"ruleId":"88","severity":1,"message":"108","line":141,"column":10,"nodeType":"90","messageId":"91","endLine":141,"endColumn":23},{"ruleId":"109","severity":1,"message":"110","line":19,"column":9,"nodeType":"111","endLine":19,"endColumn":50},{"ruleId":"88","severity":1,"message":"100","line":52,"column":12,"nodeType":"90","messageId":"91","endLine":52,"endColumn":17},{"ruleId":"112","severity":1,"message":"113","line":68,"column":8,"nodeType":"114","endLine":68,"endColumn":10,"suggestions":"115"},"@typescript-eslint/no-unused-vars","'Radio' is defined but never used.","Identifier","unusedVar","'RadioGroup' is defined but never used.","'FormControlLabel' is defined but never used.","no-native-reassign",["116"],"no-negated-in-lhs",["117"],["116"],["117"],"'error' is assigned a value but never used.","'Project' is defined but never used.","'useStyles' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'TaskReference' is defined but never used.","'filteredUsers' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'task.project'. Either include it or remove the dependency array. If 'setCategories' needs the current value of 'task.project', you can also switch to useReducer instead of useState and read 'task.project' in the reducer.","ArrayExpression",["118"],"no-global-assign","no-unsafe-negation",{"desc":"119","fix":"120"},"Update the dependencies array to be: [task.project]",{"range":"121","text":"122"},[1894,1896],"[task.project]"]