[{"C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\App.tsx":"1","C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\pages\\Project.tsx":"2","C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\pages\\Task.tsx":"3","C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\pages\\Login.tsx":"4","C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\pages\\NotFound.tsx":"5","C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\pages\\MyProjects.tsx":"6","C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\components\\ProjectItem.tsx":"7","C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\pages\\ProjectScrum.tsx":"8","C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\pages\\Category.tsx":"9","C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\utils\\constants.ts":"10","C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\pages\\Home.tsx":"11","C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\utils\\firebase.ts":"12","C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\components\\BoardCard.tsx":"13","C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\components\\BoardColumn.tsx":"14","C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\index.tsx":"15","C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\serviceWorkerRegistration.ts":"16","C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\utils\\firestore.ts":"17","C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\hooks\\useFetchProjectsForUser.tsx":"18","C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\pages\\ManageUsers.tsx":"19"},{"size":3525,"mtime":1608395063594,"results":"20","hashOfConfig":"21"},{"size":3610,"mtime":1608460144141,"results":"22","hashOfConfig":"21"},{"size":8642,"mtime":1608460133177,"results":"23","hashOfConfig":"21"},{"size":3090,"mtime":1608460098980,"results":"24","hashOfConfig":"21"},{"size":166,"mtime":1608460157440,"results":"25","hashOfConfig":"21"},{"size":1305,"mtime":1608460180738,"results":"26","hashOfConfig":"21"},{"size":4708,"mtime":1607971709276,"results":"27","hashOfConfig":"21"},{"size":13964,"mtime":1608460227175,"results":"28","hashOfConfig":"21"},{"size":3808,"mtime":1608460118741,"results":"29","hashOfConfig":"21"},{"size":303,"mtime":1608060826381,"results":"30","hashOfConfig":"21"},{"size":1197,"mtime":1608457415185,"results":"31","hashOfConfig":"21"},{"size":3143,"mtime":1607965550748,"results":"32","hashOfConfig":"21"},{"size":3134,"mtime":1608457415175,"results":"33","hashOfConfig":"21"},{"size":1903,"mtime":1608335467416,"results":"34","hashOfConfig":"21"},{"size":323,"mtime":1608247230615,"results":"35","hashOfConfig":"21"},{"size":5654,"mtime":1608247230617,"results":"36","hashOfConfig":"21"},{"size":1732,"mtime":1608457415194,"results":"37","hashOfConfig":"21"},{"size":680,"mtime":1608457415182,"results":"38","hashOfConfig":"21"},{"size":3701,"mtime":1608460192300,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"10c0u2v",{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\App.tsx",[],"C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\pages\\Project.tsx",[],"C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\pages\\Task.tsx",["81"],"import { Card, CardActions, CardContent, FormControl, makeStyles, TextField, Typography } from '@material-ui/core';\r\nimport Button from '@material-ui/core/Button';\r\nimport Chip from '@material-ui/core/Chip/Chip';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport React, { FC, useEffect, useState } from 'react';\r\nimport ReactMarkdown from 'react-markdown';\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\nimport useFetchCategoriesForProject from '../hooks/useFetchCategoriesForProject';\r\nimport { Category, Task, TaskReference, tasksCollection, useLoggedInUser } from '../utils/firebase';\r\nimport * as FirestoreService from '../utils/firestore';\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 120,\r\n    fullWidth: 'true',\r\n    display: 'flex',\r\n  },\r\n  selectEmpty: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n  button: {\r\n    variant: 'text',\r\n    size: 'large',\r\n    color: theme.palette.primary.main,\r\n  },\r\n  preview: {\r\n    textAlign: 'left',\r\n    fontSize: \"65%\",\r\n  },\r\n  categories: {\r\n    marginLeft: '10px',\r\n  },\r\n  chip: {\r\n    margin: theme.spacing(0.5)\r\n  }\r\n}));\r\n\r\nexport type TaskStateProps = {\r\n  taskId: string,\r\n  project: string,\r\n  category: string[],\r\n  name: string,\r\n  note: string,\r\n  phase: string,\r\n  order: number\r\n}\r\n\r\nconst TaskForm: FC = () => {\r\n  document.title = 'Task editor';\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const location = useLocation<TaskStateProps>();\r\n  const projectId = location.state.project;\r\n  const taskId = location.state.taskId;\r\n\r\n  const user = useLoggedInUser();\r\n  const categories: Category[] = useFetchCategoriesForProject(projectId);\r\n\r\n  const [name, setName] = useState<string>(location.state.name ?? '');\r\n  const [note, setNote] = useState<string>(location.state.note ?? '');\r\n  const [phase, setPhase] = useState<string>(location.state.phase ?? 'TO DO');\r\n  const [categoryIds, setCategoryIds] = useState<string[]>(location.state.category ?? []);\r\n\r\n\r\n  const handleCategoriesSelection = (catId: string) => {\r\n    // category is not yet selected => insert into selected categories\r\n    if (categoryIds.find(id => id === catId) === undefined) {\r\n      setCategoryIds(oldIds => [...oldIds, catId])\r\n    } else {\r\n      // else remove it from selected categories\r\n      setCategoryIds(selectedCategories => selectedCategories.filter(cat => cat !== catId))\r\n\r\n    }\r\n  }\r\n\r\n  const changeChipColor = (cat: Category) => {\r\n    if (categoryIds.find(item => item === cat.id) !== undefined) {\r\n      return cat.color;\r\n    }\r\n    return \"#dfe6e9\";\r\n  }\r\n\r\n  const handleTaskSubmit = async () => {\r\n    if (user) {\r\n      try {\r\n\r\n        let taskOrder = taskId ? location.state.order : tasks.filter(task => task.project === projectId && task.phase === phase).length + 1;\r\n\r\n        if (location.state.phase !== phase) {\r\n          let taskOrderOriginal = taskOrder; // ulozeni puvodniho task orderu\r\n          taskOrder = tasks.filter(task => task.project === projectId && task.phase === phase).length + 1;\r\n          /**\r\n           * Pri presunu do jine faze je potreba take updatnout poradi prvku, ktere za nimi, tudis dekrementovat o 1\r\n           */\r\n          const tasksToUpdate = tasks.filter(task => task.project === projectId && task.phase === location.state.phase && task.order > taskOrderOriginal)\r\n          tasksToUpdate.map((task, i) => {\r\n            tasksCollection.doc(task.id).update({ order: task.order - 1 });\r\n          })\r\n        }\r\n\r\n        const taskDoc: TaskReference = taskId ? tasksCollection.doc(taskId) : tasksCollection.doc();\r\n        const taskToSave: Task = { id: taskDoc.id, name, note, phase, category: categoryIds, project: projectId, order: taskOrder, by: { uid: user.uid, email: user.email } };\r\n        await FirestoreService.saveTask(taskToSave, user);\r\n        history.push('/project-scrum', projectId);\r\n      } catch (err) {\r\n        console.log(err.message);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleTaskDelete = async () => {\r\n    if (taskId) {\r\n      try {\r\n        /**\r\n         * Pri presunu do jine faze je potreba take updatnout poradi prvku, ktere za nimi, tudis dekrementovat o 1\r\n         */\r\n        let taskOrder = taskId ? location.state.order : tasks.filter(task => task.project === projectId && task.phase === phase).length + 1;\r\n        const tasksToUpdate = tasks.filter(task => task.project === projectId && task.phase === location.state.phase && task.order > taskOrder)\r\n        tasksToUpdate.map((task, i) =>\r\n          tasksCollection.doc(task.id).update({ order: task.order - 1 })\r\n        )\r\n      } catch (err) {\r\n        console.log(`[Task delete] Error occurred ${err.message}`);\r\n      }\r\n      FirestoreService.deleteTask(taskId);\r\n      history.push('/project-scrum', projectId);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Zobrazeni tasku\r\n   */\r\n  const [tasks, setTasks] = useState<Task[]>([]);\r\n  useEffect(() => {\r\n    tasksCollection.onSnapshot(\r\n      snapshot => {\r\n        const taskFromFS: Task[] = snapshot.docs.map(doc => {\r\n          const task: Task = doc.data();\r\n          const id: string = doc.id;\r\n          return { ...task, id: id }\r\n        });\r\n        setTasks(taskFromFS);\r\n      },\r\n      err => console.log(err.message),\r\n    );\r\n  }, []);\r\n\r\n  return (\r\n    <Card>\r\n      <CardContent>\r\n        <Grid item lg={6} direction=\"row\">\r\n          <Typography variant='h4' gutterBottom>\r\n            {taskId ? 'Update task' : 'Create task'}\r\n          </Typography>\r\n        </Grid>\r\n        <Grid container spacing={6} direction=\"row\">\r\n          <Grid item lg={6} direction=\"column\" alignContent=\"flex-start\">\r\n            <TextField\r\n              label='Task name'\r\n              name='name'\r\n              fullWidth\r\n              margin='normal'\r\n              variant='outlined'\r\n              value={name}\r\n              onChange={e => setName(e.target.value)}\r\n            />\r\n\r\n            <FormControl className={classes.formControl}>\r\n              <InputLabel id=\"demo-simple-select-label\">Phase</InputLabel>\r\n              <Select\r\n                labelId=\"demo-simple-select-label\"\r\n                id=\"demo-simple-select\"\r\n                value={phase}\r\n                onChange={e => setPhase(e.target.value as string)}\r\n              >\r\n                <MenuItem value={'TO DO'}>TO DO</MenuItem>\r\n                <MenuItem value={'IN PROGRESS'}>IN PROGRESS</MenuItem>\r\n                <MenuItem value={'TESTING'}>TESTING</MenuItem>\r\n                <MenuItem value={'DONE'}>DONE</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n\r\n            <FormControl margin=\"normal\" fullWidth className={classes.categories}>\r\n              <Typography variant='caption' color='textSecondary' align=\"left\">\r\n                Categories\r\n              </Typography>\r\n              <div>\r\n                {categories.map((cat, i) => (\r\n                  <Chip\r\n                    key={i}\r\n                    size=\"small\"\r\n                    label={cat.name}\r\n                    clickable\r\n                    onClick={() => handleCategoriesSelection(cat.id)}\r\n                    className={classes.chip}\r\n                    style={{ backgroundColor: `${changeChipColor(cat)}` }}\r\n                  />\r\n                ))}\r\n              </div>\r\n            </FormControl>\r\n\r\n            <TextField\r\n              label='Note'\r\n              name='note'\r\n              fullWidth\r\n              multiline\r\n              margin='normal'\r\n              variant='outlined'\r\n              value={note}\r\n              onChange={e => setNote(e.target.value)}\r\n            />\r\n          </Grid>\r\n\r\n          <Grid container item lg={6} direction=\"column\" alignItems=\"flex-start\">\r\n            <Typography variant='caption' color='textSecondary'>\r\n              Note preview\r\n            </Typography>\r\n\r\n            <ReactMarkdown children={note} className={classes.preview} />\r\n          </Grid>\r\n        </Grid>\r\n      </CardContent>\r\n\r\n      <CardActions>\r\n        <Button className={classes.button} onClick={handleTaskSubmit}>\r\n          {taskId ? 'Update task' : 'Create task'}\r\n        </Button>\r\n\r\n        {(taskId) && <Button className={classes.button} onClick={handleTaskDelete}>\r\n          Delete task\r\n        </Button>}\r\n\r\n        <Button className={classes.button} onClick={() => history.goBack()}>\r\n          Back\r\n        </Button>\r\n      </CardActions>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default TaskForm;\r\n","C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\pages\\Login.tsx",[],"C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\pages\\NotFound.tsx",[],"C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\pages\\MyProjects.tsx",[],"C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\components\\ProjectItem.tsx",["82","83","84","85","86"],"C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\pages\\ProjectScrum.tsx",["87"],"import { Checkbox, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Divider, Fab, IconButton, List, ListItem, ListItemIcon, ListItemSecondaryAction, ListItemText, ListSubheader } from '@material-ui/core';\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport AddCircleOutlinedIcon from '@material-ui/icons/AddCircleOutlined';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport PersonAddOutlinedIcon from '@material-ui/icons/PersonAddOutlined';\r\nimport React, { FC, useEffect, useState } from 'react';\r\nimport { DragDropContext } from 'react-beautiful-dnd';\r\nimport { Link, useLocation } from 'react-router-dom';\r\nimport { BoardColumn } from '../components/BoardColumn';\r\nimport { useFetchCategoriesForProject } from '../hooks/useFetchCategoriesForProject';\r\nimport useFetchProject from '../hooks/useFetchProject';\r\nimport { categoriesCollection, Category, Project, Task, tasksCollection, useLoggedInUser } from '../utils/firebase';\r\n\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  card: { height: '100%' },\r\n  listRoot: {\r\n    width: '100%',\r\n    minWidth: 120,\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n  fabStyle: {\r\n    minWidth: 350,\r\n    margin: theme.spacing(5),\r\n  },\r\n  extendedIcon: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n}));\r\n\r\n\r\nconst ProjectScrum: FC = () => {\r\n  document.title = 'SCRUM';\r\n  const classes = useStyles();\r\n  const location = useLocation<string>();\r\n  const projectId = location.state ?? '';\r\n  const [error, setError] = useState<string>();\r\n\r\n  const user = useLoggedInUser();\r\n  const categories: Category[] = useFetchCategoriesForProject(projectId);\r\n  const project: Project | undefined = useFetchProject(projectId);\r\n\r\n  const [checked, setChecked] = useState<Record<string, number>>({});\r\n  const [categoryToDelete, setCategoryToDelete] = useState<Category | null>(null);\r\n\r\n  const [dialogOpen, setDialogOpen] = useState<boolean>(false);\r\n  const handleOpenDialog = () => setDialogOpen(true);\r\n  const handleCloseDialog = () => {\r\n    setDialogOpen(false);\r\n    setCategoryToDelete(null);\r\n  }\r\n\r\n\r\n\r\n  const [tasks, setTasks] = useState<Task[]>([]);\r\n  useEffect(() => {\r\n    tasksCollection.onSnapshot(\r\n      snapshot => {\r\n        const tasksFromFS: Task[] = snapshot.docs.map(doc => {\r\n          const task: Task = doc.data();\r\n          const id: string = doc.id;\r\n          return { ...task, id: id }\r\n        });\r\n        const tasksOfProject = tasksFromFS.filter(task => task.project === location.state);\r\n        setTasks(tasksOfProject);\r\n        setFilteredTasks(tasksOfProject);\r\n        setChecked({});\r\n      },\r\n      err => setError(err.message),\r\n    );\r\n  }, [location.state]);\r\n\r\n  /**\r\n   * Funkce pro mazani kategorie\r\n   */\r\n  const deleteCategory = (categoryId: string | undefined) => {\r\n    if (!categoryId) return;\r\n    /**\r\n     * Nejprve musim prepsat u tasku s danou kategorii polozku category na prazdny retezec\r\n     */\r\n    for (const task of tasks) {\r\n      const updatedCategory = task.category.filter(item => item !== categoryId)\r\n      tasksCollection.doc(task.id).update({\r\n        category: updatedCategory\r\n      });\r\n    }\r\n\r\n    categoriesCollection.doc(categoryId).delete();\r\n  }\r\n\r\n  // tasks filtered with checkboxes\r\n  const [filteredTasks, setFilteredTasks] = useState<Task[]>([]);\r\n  const filterTasksByPhase = (phase: string) => {\r\n    return filteredTasks.filter(task => task.phase === phase).sort((a, b) => a.order > b.order ? 1 : -1)\r\n  };\r\n\r\n  // tasks filtered with checkboxes\r\n  const handleCheckboxToggle = (category: Category) => () => {\r\n    const currentValue: number = checked[category.id] ?? -1;\r\n    const newChecked: Record<string, number> = { ...checked };\r\n\r\n    newChecked[category.id] = currentValue === -1 ? 1 : -1;\r\n\r\n    setChecked(newChecked);\r\n\r\n    if (Object.entries(newChecked).filter((check: [string, number]) => check[1] === 1).length === 0) {\r\n      setFilteredTasks(tasks); // all checkboxes are unchecked -> display all tasks\r\n    } else {\r\n      let newTasks: Task[] = []\r\n      for (const task of tasks) {\r\n        for (const categoryId of task.category) {\r\n          if (categoryId in newChecked && newChecked[categoryId] === 1) {\r\n            newTasks.push(task)\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      setFilteredTasks(newTasks)\r\n      //(newChecked)\r\n      //setFilteredTasks(tasks.filter(task => task.category in newChecked && newChecked[task.category] === 1));\r\n    }\r\n  };\r\n\r\n  // Handle drag & drop\r\n  const onDragEnd = (result: any) => {\r\n    const { source, destination, draggableId } = result\r\n\r\n    // Do nothing if item is dropped outside the list\r\n    if (!destination) {\r\n      return\r\n    }\r\n\r\n    // Do nothing if the item is dropped into the same place\r\n    if (destination.droppableId === source.droppableId) {\r\n      const sourceToChange = tasks.filter(task => task.project === projectId && task.phase === source.droppableId && task.order === source.index + 1)[0];\r\n      const destinationToChange = tasks.filter(task => task.project === projectId && task.phase === destination.droppableId && task.order === destination.index + 1)[0];\r\n      /**\r\n       * V podstate vymenim hodnoty, funguje\r\n       */\r\n      try {\r\n        // tasksCollection.doc(sourceToChange.id).update({ order: destinationToChange.order });\r\n        if (source.index > destination.index) {\r\n          //alert(`${destinationToChange.order}, ${sourceToChange.order}`)\r\n          const sourceTasksToUpdate = tasks.filter(task => task.project === projectId && task.phase === source.droppableId && task.order >= destinationToChange.order && task.order < sourceToChange.order)\r\n          sourceTasksToUpdate.forEach(task => {\r\n            //alert(`Upravuji ${task.name} na pozici ${task.order + 1 }`)\r\n            tasksCollection.doc(task.id).update({ order: task.order + 1 });\r\n          })\r\n          tasksCollection.doc(sourceToChange.id).update({ order: destinationToChange.order });\r\n          //alert(`Upravuji ${sourceToChange.name} na pozici ${destinationToChange.order}`)\r\n          // nejprve upravim index tasku\r\n        } else if (destination.index > source.index) {\r\n          const sourceTasksToUpdate = tasks.filter(task => task.project === projectId && task.phase === source.droppableId && task.order > sourceToChange.order && task.order <= destinationToChange.order)\r\n          sourceTasksToUpdate.forEach(task => {\r\n            //alert(`Upravuji ${task.name} na pozici ${task.order - 1 }`)\r\n            tasksCollection.doc(task.id).update({ order: task.order - 1 });\r\n          })\r\n          tasksCollection.doc(sourceToChange.id).update({ order: destinationToChange.order });\r\n          //alert(`Upravuji ${sourceToChange.name} na pozici ${destinationToChange.order}`)\r\n          //alert(`${sourceToChange.name}, ${sourceToChange.order}, ${destinationToChange.order}`)\r\n          //alert(\"jedu z vrchu dolu\")\r\n        }\r\n      } catch (err) {\r\n        setError(err.what);\r\n      }\r\n    } else {\r\n      /**\r\n       * Je potreba zmenit indexy jak v source tak v destination\r\n       */\r\n      /**\r\n       * Upravim source\r\n       */\r\n      const sourceTasksToUpdate = tasks.filter(task => task.project === projectId && task.phase === source.droppableId && task.order > source.index + 1)\r\n      sourceTasksToUpdate.forEach(task => {\r\n        //alert(`Upravuji ${task.name}, na pozici ${task.order - 1} ve ${task.phase}`)\r\n        tasksCollection.doc(task.id).update({ order: task.order - 1 });\r\n      })\r\n      /**\r\n       * Upravim destination\r\n       */\r\n      const destinationTasksToUpdate = tasks.filter(task => task.project === projectId && task.phase === destination.droppableId && task.order > destination.index)\r\n      destinationTasksToUpdate.forEach(task => {\r\n        //alert(`Upravuji ${task.name}, na pozici ${task.order + 1} ve ${task.phase}`)\r\n        tasksCollection.doc(task.id).update({ order: task.order + 1 });\r\n      })\r\n\r\n      //alert(sourceToChange.order)\r\n      let taskToChange = tasks.find(task => task.id === draggableId);\r\n      if (taskToChange) {\r\n        taskToChange.phase = destination.droppableId;\r\n        try {\r\n          //alert(`Upravuji ${taskToChange.name}, na pozici ${destination.index + 1} ve ${destination.droppableId}`)\r\n          tasksCollection.doc(taskToChange.id).update({ phase: destination.droppableId, order: destination.index + 1 });\r\n        } catch (err) {\r\n          setError(err.what);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Grid container direction=\"row\" justify=\"space-evenly\" alignItems=\"flex-start\" spacing={2}>\r\n        <Grid item xs={12} sm={6} md={3}>\r\n          <List className={classes.listRoot}>\r\n            <ListSubheader>\r\n              <Typography variant=\"h6\">Categories</Typography>\r\n              <Link to={{\r\n                pathname: '/category',\r\n                state: {\r\n                  \"project\": location.state\r\n                }\r\n              }}>\r\n                <IconButton edge=\"end\">\r\n                  <AddCircleOutlinedIcon />\r\n                </IconButton>\r\n              </Link>\r\n              <Divider variant=\"middle\" />\r\n            </ListSubheader>\r\n            {categories.map((category: Category) => {\r\n              const labelId = `checkbox-list-label-${category.name}`;\r\n              return (\r\n                <ListItem key={category.id} role={undefined} dense button onClick={handleCheckboxToggle(category)}>\r\n                  <ListItemIcon>\r\n                    <Checkbox\r\n                      color=\"primary\"\r\n                      edge=\"start\"\r\n                      checked={checked[category.id] === 1}\r\n                      tabIndex={-1}\r\n                      disableRipple\r\n                      inputProps={{ 'aria-labelledby': labelId }}\r\n                    />\r\n                  </ListItemIcon>\r\n                  <ListItemText id={labelId} primary={<Typography color=\"textPrimary\">{category.name}</Typography>} />\r\n\r\n                  <ListItemSecondaryAction>\r\n                    <Link to={{\r\n                      pathname: '/category',\r\n                      state: {\r\n                        \"categoryId\": category.id,\r\n                        \"project\": location.state,\r\n                        \"name\": category.name,\r\n                        \"color\": category.color,\r\n                      }\r\n                    }}>\r\n                      <IconButton edge=\"end\">\r\n                        <EditIcon />\r\n                      </IconButton>\r\n                    </Link>\r\n                    <IconButton edge=\"end\" onClick={() => {\r\n                      setCategoryToDelete(category);\r\n                      handleOpenDialog();\r\n                    }}>\r\n                      <DeleteIcon />\r\n                    </IconButton>\r\n                  </ListItemSecondaryAction>\r\n\r\n                </ListItem>\r\n              );\r\n            })}\r\n          </List>\r\n        </Grid>\r\n\r\n        <DragDropContext onDragEnd={onDragEnd}>\r\n          <Grid container item xs={12} sm={12} md={9} spacing={1}>\r\n            <Grid item xs={12} sm={6} md={3}>\r\n              <BoardColumn title={\"TO DO\"} tasks={filterTasksByPhase(\"TO DO\")} categories={categories} />\r\n            </Grid>\r\n            <Grid item xs={12} sm={6} md={3}>\r\n              <BoardColumn title={\"IN PROGRESS\"} tasks={filterTasksByPhase(\"IN PROGRESS\")} categories={categories} />\r\n            </Grid>\r\n            <Grid item xs={12} sm={6} md={3}>\r\n              <BoardColumn title={\"TESTING\"} tasks={filterTasksByPhase(\"TESTING\")} categories={categories} />\r\n            </Grid>\r\n            <Grid item xs={12} sm={6} md={3}>\r\n              <BoardColumn title={\"DONE\"} tasks={filterTasksByPhase(\"DONE\")} categories={categories} />\r\n            </Grid>\r\n          </Grid>\r\n        </DragDropContext>\r\n      </Grid>\r\n\r\n      <Dialog\r\n        open={dialogOpen}\r\n        onClose={handleCloseDialog}\r\n      >\r\n        <DialogTitle id=\"alert-dialog-delete-category\">{\"Data deletion warning\"}</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText id=\"alert-dialog-delete-category-description\">\r\n            This action will permanently delete category: <b>{categoryToDelete?.name}</b>\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleCloseDialog} color=\"primary\">\r\n            Cancel\r\n          </Button>\r\n          <Button onClick={() => {\r\n            deleteCategory(categoryToDelete?.id);\r\n            handleCloseDialog();\r\n          }}\r\n            color=\"primary\" autoFocus>\r\n            Delete\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n\r\n      <Link to={{\r\n        pathname: '/task',\r\n        state: {\r\n          \"project\": location.state\r\n        }\r\n      }}>\r\n        <Fab size=\"large\" variant=\"extended\" color=\"primary\" aria-label=\"add task\" className={classes.fabStyle}>\r\n          <AddCircleOutlinedIcon className={classes.extendedIcon} />\r\n          <Typography variant=\"h6\">Add task</Typography>\r\n        </Fab>\r\n      </Link>\r\n\r\n      {/* Link to: ManageUsers, state type: ManageUsersFormProps  */}\r\n      {user && project && user.uid === project.by.uid && <Link to={{\r\n        pathname: '/manage-users',\r\n        state: {\r\n          \"projectId\": location.state,\r\n          \"owner\": {\r\n            \"uid\": user.uid,\r\n            \"email\": user.email\r\n          }\r\n        }\r\n      }}>\r\n        <Fab size=\"large\" variant=\"extended\" color=\"secondary\" aria-label=\"add users\" className={classes.fabStyle}>\r\n          <PersonAddOutlinedIcon className={classes.extendedIcon} />\r\n          <Typography variant=\"h6\">Manage project members</Typography>\r\n        </Fab>\r\n      </Link>\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProjectScrum;\r\n","C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\pages\\Category.tsx",[],"C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\utils\\constants.ts",[],"C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\pages\\Home.tsx",[],"C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\utils\\firebase.ts",[],"C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\components\\BoardCard.tsx",[],"C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\components\\BoardColumn.tsx",[],"C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\index.tsx",[],["88","89"],"C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\serviceWorkerRegistration.ts",[],"C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\utils\\firestore.ts",[],"C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\hooks\\useFetchProjectsForUser.tsx",[],"C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\pages\\ManageUsers.tsx",[],{"ruleId":"90","severity":1,"message":"91","line":102,"column":39,"nodeType":"92","messageId":"93","endLine":102,"endColumn":41},{"ruleId":"94","severity":1,"message":"95","line":14,"column":42,"nodeType":"96","messageId":"97","endLine":14,"endColumn":49},{"ruleId":"94","severity":1,"message":"98","line":21,"column":7,"nodeType":"96","messageId":"97","endLine":21,"endColumn":16},{"ruleId":"94","severity":1,"message":"99","line":40,"column":12,"nodeType":"96","messageId":"97","endLine":40,"endColumn":17},{"ruleId":"90","severity":1,"message":"91","line":84,"column":72,"nodeType":"92","messageId":"93","endLine":84,"endColumn":74},{"ruleId":"90","severity":1,"message":"91","line":88,"column":76,"nodeType":"92","messageId":"93","endLine":88,"endColumn":78},{"ruleId":"94","severity":1,"message":"99","line":42,"column":10,"nodeType":"96","messageId":"97","endLine":42,"endColumn":15},{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","replacedBy":"103"},"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","@typescript-eslint/no-unused-vars","'Project' is defined but never used.","Identifier","unusedVar","'useStyles' is assigned a value but never used.","'error' is assigned a value but never used.","no-native-reassign",["104"],"no-negated-in-lhs",["105"],"no-global-assign","no-unsafe-negation"]