[{"C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\App.tsx":"1","C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\pages\\Project.tsx":"2","C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\pages\\Task.tsx":"3","C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\pages\\Login.tsx":"4","C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\pages\\NotFound.tsx":"5","C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\pages\\MyProjects.tsx":"6","C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\components\\ProjectItem.tsx":"7","C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\pages\\ProjectScrum.tsx":"8","C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\pages\\Category.tsx":"9","C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\utils\\constants.ts":"10","C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\pages\\Home.tsx":"11","C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\utils\\firebase.ts":"12","C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\components\\BoardCard.tsx":"13","C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\components\\BoardColumn.tsx":"14","C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\index.tsx":"15"},{"size":3387,"mtime":1607879252014,"results":"16","hashOfConfig":"17"},{"size":3025,"mtime":1607939887886,"results":"18","hashOfConfig":"17"},{"size":7840,"mtime":1607950790413,"results":"19","hashOfConfig":"17"},{"size":3072,"mtime":1606483042490,"results":"20","hashOfConfig":"17"},{"size":130,"mtime":1606483013762,"results":"21","hashOfConfig":"17"},{"size":2193,"mtime":1607017290776,"results":"22","hashOfConfig":"17"},{"size":4433,"mtime":1607951646697,"results":"23","hashOfConfig":"17"},{"size":12947,"mtime":1607963719251,"results":"24","hashOfConfig":"17"},{"size":3491,"mtime":1607951199791,"results":"25","hashOfConfig":"17"},{"size":271,"mtime":1607338411515,"results":"26","hashOfConfig":"17"},{"size":166,"mtime":1606490976531,"results":"27","hashOfConfig":"17"},{"size":3185,"mtime":1607960634216,"results":"28","hashOfConfig":"17"},{"size":3077,"mtime":1607355289504,"results":"29","hashOfConfig":"17"},{"size":1031,"mtime":1607355289510,"results":"30","hashOfConfig":"17"},{"size":231,"mtime":1606482515759,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"10c0u2v",{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\App.tsx",[],"C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\pages\\Project.tsx",[],"C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\pages\\Task.tsx",["64","65","66"],"import React from 'react';\r\nimport ReactMarkdown from 'react-markdown';\r\n\r\nimport { FC, useEffect, useState } from 'react';\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\nimport { categoriesCollection, Category, TaskReference, tasksCollection, useLoggedInUser } from '../utils/firebase';\r\n\r\nimport { Card, CardContent, CardActions } from '@material-ui/core';\r\nimport { Typography, TextField } from '@material-ui/core';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from '@material-ui/core/Button';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport { FormControl, makeStyles, Radio, RadioGroup } from '@material-ui/core';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel/FormControlLabel';\r\nimport Chip from '@material-ui/core/Chip/Chip';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 120,\r\n    fullWidth: 'true',\r\n    display: 'flex',\r\n  },\r\n  selectEmpty: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n  button: {\r\n    variant: 'text',\r\n    size: 'large',\r\n    color: theme.palette.primary.main,\r\n  },\r\n  preview: {\r\n    textAlign: 'left',\r\n    fontSize: \"65%\",\r\n  },\r\n  categories: {\r\n    marginLeft: '10px',\r\n  },\r\n  chip: {\r\n    margin: theme.spacing(0.5)\r\n  }\r\n}));\r\n\r\n/**\r\n * Stranka pro vytvareni tasku\r\n */\r\nconst TaskForm: FC = () => {\r\n  const location = useLocation<{ taskId: string, project: string, category: string[], name: string, note: string, phase: string }>();\r\n\r\n  const [name, setName] = useState(location.state.name === undefined ? '' : location.state.name);\r\n  const [note, setNote] = useState(location.state.note === undefined ? '' : location.state.note);\r\n  const [phase, setPhase] = useState(location.state.phase === undefined ? 'TO DO' : location.state.phase);\r\n  const [error, setError] = useState<string>();\r\n  /**\r\n   * Vkladani kategorii do pole\r\n   */\r\n  const [category, setCategory] = useState<string[]>(location.state.category === undefined ? [] : location.state.category);\r\n  const handleTaskCategories = (category_item: string) => {\r\n    // nasla se kategorie\r\n    if (category.find(item => item === category_item) !== undefined) {\r\n      try {\r\n        setCategory(category.filter(item => item !== category_item))\r\n      } catch (err) {\r\n        setError(err.what);\r\n      }\r\n    } else {\r\n      try {\r\n        setCategory(category => [...category, category_item])\r\n      } catch (err) {\r\n        setError(err.what);\r\n      }\r\n    }\r\n  }\r\n\r\n  const changeChipColor = (category_item: Category) => {\r\n    if (category.find(item => item === category_item.id) !== undefined) {\r\n      return category_item.color;\r\n    }\r\n\r\n    return \"gray\";\r\n  }\r\n\r\n  const classes = useStyles();\r\n\r\n  const { push } = useHistory();\r\n  const history = useHistory();\r\n\r\n  const user = useLoggedInUser();\r\n\r\n  const taskId = location.state.taskId;\r\n  const projectId = location.state.project;\r\n\r\n  const handleChangePhase = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n    setPhase(event.target.value as string);\r\n  };\r\n\r\n  /**\r\n   * Ulozeni tasku\r\n   */\r\n  const handleTaskSubmit = async () => {\r\n    try {\r\n      const taskDoc: TaskReference = taskId ? tasksCollection.doc(taskId) : tasksCollection.doc();\r\n\r\n      await taskDoc.set({\r\n        id: taskDoc.id,\r\n        name,\r\n        category,\r\n        phase,\r\n        project: projectId,\r\n        by: {\r\n          uid: user?.uid ?? '',\r\n          email: user?.email ?? '',\r\n        },\r\n        note,\r\n      });\r\n\r\n      push('/project-scrum', projectId);\r\n    } catch (err) {\r\n\r\n      setError(err.what);\r\n    }\r\n  };\r\n\r\n  const handleTaskDelete = async () => {\r\n    try {\r\n      await tasksCollection.doc(taskId).delete();\r\n      push('/project-scrum', projectId);\r\n    } catch (err) {\r\n      console.log(`[Task submit] Error occurred ${err.message}`);\r\n      setError(err.what);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Zobrazeni kategorii\r\n   */\r\n  const [categories, setCategories] = useState<Category[]>([]);\r\n  useEffect(() => {\r\n    categoriesCollection.onSnapshot(\r\n      snapshot => {\r\n        const categoriesFromFS: Category[] = snapshot.docs.map(doc => {\r\n          const cat: Category = doc.data();\r\n          const id: string = doc.id;\r\n          return { ...cat, id: id }\r\n        });\r\n        setCategories(categoriesFromFS);\r\n      },\r\n      err => setError(err.message),\r\n    );\r\n  }, []);\r\n\r\n\r\n  return (\r\n    <Card>\r\n      <CardContent>\r\n        <Grid item lg={6} direction=\"row\">\r\n          <Typography variant='h4' gutterBottom>\r\n            {taskId ? 'Update task' : 'Create task'}\r\n          </Typography>\r\n        </Grid>\r\n        <Grid container spacing={6} direction=\"row\">\r\n          <Grid item lg={6} direction=\"column\" alignContent=\"flex-start\">\r\n            <TextField\r\n              label='Task name'\r\n              name='name'\r\n              fullWidth\r\n              margin='normal'\r\n              variant='outlined'\r\n              value={name}\r\n              onChange={e => setName(e.target.value)}\r\n            />\r\n\r\n            <FormControl className={classes.formControl}>\r\n              <InputLabel id=\"demo-simple-select-label\">Phase</InputLabel>\r\n              <Select\r\n                labelId=\"demo-simple-select-label\"\r\n                id=\"demo-simple-select\"\r\n                value={phase}\r\n                onChange={handleChangePhase}\r\n              >\r\n                <MenuItem value={'TO DO'}>TO DO</MenuItem>\r\n                <MenuItem value={'IN PROGRESS'}>IN PROGRESS</MenuItem>\r\n                <MenuItem value={'TESTING'}>TESTING</MenuItem>\r\n                <MenuItem value={'DONE'}>DONE</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n            \r\n            <FormControl margin=\"normal\" fullWidth className={classes.categories}>\r\n\r\n            <Typography variant='caption' color='textSecondary' align=\"left\">\r\n                Categories\r\n            </Typography>\r\n            <div>\r\n            {categories.filter(category => category.project === projectId).map((cat, i) => (\r\n              <Chip\r\n                size=\"small\"\r\n                label={cat.name}\r\n                clickable\r\n                onClick={() => {handleTaskCategories(cat.id)}}\r\n                className={classes.chip}\r\n                style={{backgroundColor: `${changeChipColor(cat)}`}} \r\n              />\r\n            ))}\r\n            </div>\r\n            </FormControl>\r\n\r\n            <TextField\r\n              label='Note'\r\n              name='note'\r\n              fullWidth\r\n              multiline\r\n              margin='normal'\r\n              variant='outlined'\r\n              value={note}\r\n              onChange={e => setNote(e.target.value)}\r\n            />\r\n          </Grid>\r\n\r\n          <Grid container item lg={6} direction=\"column\" alignItems=\"flex-start\">\r\n            <Typography variant='caption' color='textSecondary'>\r\n              Note preview\r\n              </Typography>\r\n\r\n            <ReactMarkdown children={note} className={classes.preview} />\r\n\r\n            {error && (\r\n              <Typography variant='subtitle2' align='left' color='error' paragraph>\r\n                <b>{error}</b>\r\n              </Typography>\r\n            )}\r\n          </Grid>\r\n        </Grid>\r\n      </CardContent>\r\n\r\n      <CardActions>\r\n        <Button className={classes.button} onClick={handleTaskSubmit}>\r\n          {taskId ? 'Update task' : 'Create task'}\r\n        </Button>\r\n\r\n        {(taskId) && <Button className={classes.button} onClick={handleTaskDelete}>\r\n          Delete task\r\n          </Button>}\r\n\r\n        <Button className={classes.button} onClick={() => history.goBack()}>\r\n          Back\r\n          </Button>\r\n      </CardActions>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default TaskForm;\r\n","C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\pages\\Login.tsx",[],"C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\pages\\NotFound.tsx",[],"C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\pages\\MyProjects.tsx",["67","68"],"import React, { FC, useEffect, useState } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport { Link } from 'react-router-dom';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Project, projectsCollection, useLoggedInUser } from '../utils/firebase';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport ProjectItem from '../components/ProjectItem';\r\n\r\n/**\r\n * Zobrazeni \"seznamu projektu\"\r\n * prozatim nastaveno, ze se zobrazi projekty vsech\r\n */\r\nconst MyProjects: FC = () => {\r\n    const user = useLoggedInUser();\r\n\r\n    const [error, setError] = useState<string>();\r\n\r\n    /**\r\n     * Ziskani pole projektu (nevim jiste, jestli existuje jednodussi zpusob)\r\n     */\r\n    const [projects, setProjects] = useState<Project[]>([]);\r\n    useEffect(() => {\r\n        projectsCollection.onSnapshot(\r\n            snapshot => {\r\n                const projectsFromFS: Project[] = snapshot.docs.map(doc => {\r\n                    const project: Project = doc.data();\r\n                    const id: string = doc.id;\r\n                    return { ...project, id: id }\r\n                });\r\n                setProjects(projectsFromFS);\r\n            },\r\n            err => setError(err.message),\r\n        );\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <Typography variant=\"h4\">\r\n                My projects\r\n        </Typography>\r\n\r\n            <Grid container spacing={1}>\r\n                {projects.map((project, i) => (\r\n                    <Grid key={i} xs={12} item>\r\n                        {/**\r\n                     * Predavam komponente hodnoty hlavne pro zachovani id projektu, ktere\r\n                     * se vyuziva pri vytvareni kategorii a tasku v komponente (prace s databazi)\r\n                     */}\r\n                        <ProjectItem note={project.note} name={project.name} id={project.id} by={project.by} />\r\n                    </Grid>\r\n                ))}\r\n            </Grid>\r\n            <Link to={{\r\n                pathname: '/project',\r\n                state: ''\r\n            }}>\r\n                <Button variant='contained'>Add new project</Button>\r\n            </Link>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MyProjects;\r\n","C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\components\\ProjectItem.tsx",["69","70","71","72","73","74"],"C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\pages\\ProjectScrum.tsx",["75","76"],"C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\pages\\Category.tsx",[],"C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\utils\\constants.ts",[],"C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\pages\\Home.tsx",[],"C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\utils\\firebase.ts",["77"],"C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\components\\BoardCard.tsx",["78","79","80"],"C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\components\\BoardColumn.tsx",[],"C:\\Users\\User\\Documents\\MUNI\\4_Semestr\\PV247_-_Modern_Development_of_User_Interfaces\\react-scrum-project\\src\\index.tsx",[],{"ruleId":"81","severity":1,"message":"82","line":15,"column":35,"nodeType":"83","messageId":"84","endLine":15,"endColumn":40},{"ruleId":"81","severity":1,"message":"85","line":15,"column":42,"nodeType":"83","messageId":"84","endLine":15,"endColumn":52},{"ruleId":"81","severity":1,"message":"86","line":16,"column":8,"nodeType":"83","messageId":"84","endLine":16,"endColumn":24},{"ruleId":"81","severity":1,"message":"87","line":14,"column":11,"nodeType":"83","messageId":"84","endLine":14,"endColumn":15},{"ruleId":"81","severity":1,"message":"88","line":16,"column":12,"nodeType":"83","messageId":"84","endLine":16,"endColumn":17},{"ruleId":"81","severity":1,"message":"89","line":14,"column":42,"nodeType":"83","messageId":"84","endLine":14,"endColumn":49},{"ruleId":"81","severity":1,"message":"90","line":14,"column":94,"nodeType":"83","messageId":"84","endLine":14,"endColumn":109},{"ruleId":"81","severity":1,"message":"91","line":21,"column":7,"nodeType":"83","messageId":"84","endLine":21,"endColumn":16},{"ruleId":"81","severity":1,"message":"88","line":39,"column":12,"nodeType":"83","messageId":"84","endLine":39,"endColumn":17},{"ruleId":"92","severity":1,"message":"93","line":83,"column":72,"nodeType":"94","messageId":"95","endLine":83,"endColumn":74},{"ruleId":"92","severity":1,"message":"93","line":87,"column":76,"nodeType":"94","messageId":"95","endLine":87,"endColumn":78},{"ruleId":"81","severity":1,"message":"88","line":48,"column":10,"nodeType":"83","messageId":"84","endLine":48,"endColumn":15},{"ruleId":"81","severity":1,"message":"96","line":156,"column":10,"nodeType":"83","messageId":"84","endLine":156,"endColumn":23},{"ruleId":"81","severity":1,"message":"97","line":5,"column":13,"nodeType":"83","messageId":"84","endLine":5,"endColumn":18},{"ruleId":"81","severity":1,"message":"91","line":17,"column":7,"nodeType":"83","messageId":"84","endLine":17,"endColumn":16},{"ruleId":"81","severity":1,"message":"88","line":36,"column":12,"nodeType":"83","messageId":"84","endLine":36,"endColumn":17},{"ruleId":"98","severity":1,"message":"99","line":51,"column":8,"nodeType":"100","endLine":51,"endColumn":10,"suggestions":"101"},"@typescript-eslint/no-unused-vars","'Radio' is defined but never used.","Identifier","unusedVar","'RadioGroup' is defined but never used.","'FormControlLabel' is defined but never used.","'user' is assigned a value but never used.","'error' is assigned a value but never used.","'Project' is defined but never used.","'useLoggedInUser' is defined but never used.","'useStyles' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'filteredUsers' is assigned a value but never used.","'admin' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'task.project'. Either include it or remove the dependency array. If 'setCategories' needs the current value of 'task.project', you can also switch to useReducer instead of useState and read 'task.project' in the reducer.","ArrayExpression",["102"],{"desc":"103","fix":"104"},"Update the dependencies array to be: [task.project]",{"range":"105","text":"106"},[1689,1691],"[task.project]"]